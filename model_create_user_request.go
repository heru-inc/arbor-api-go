/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserRequest{}

// CreateUserRequest struct for CreateUserRequest
type CreateUserRequest struct {
	FirstName string `json:"firstName"`
	LastName string `json:"lastName"`
	Email string `json:"email"`
	// Required when `groupRoleId` & `groupIds` are not provided.
	OrganizationRoleId *string `json:"organizationRoleId,omitempty"`
	// Required when `organizationRoleId` is not provided.
	GroupRoleId *string `json:"groupRoleId,omitempty"`
	// Required when `organizationRoleId` is not provided.
	GroupIds []string `json:"groupIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateUserRequest CreateUserRequest

// NewCreateUserRequest instantiates a new CreateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserRequest(firstName string, lastName string, email string) *CreateUserRequest {
	this := CreateUserRequest{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Email = email
	return &this
}

// NewCreateUserRequestWithDefaults instantiates a new CreateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserRequestWithDefaults() *CreateUserRequest {
	this := CreateUserRequest{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *CreateUserRequest) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *CreateUserRequest) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *CreateUserRequest) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *CreateUserRequest) SetLastName(v string) {
	o.LastName = v
}

// GetEmail returns the Email field value
func (o *CreateUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetOrganizationRoleId returns the OrganizationRoleId field value if set, zero value otherwise.
func (o *CreateUserRequest) GetOrganizationRoleId() string {
	if o == nil || IsNil(o.OrganizationRoleId) {
		var ret string
		return ret
	}
	return *o.OrganizationRoleId
}

// GetOrganizationRoleIdOk returns a tuple with the OrganizationRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetOrganizationRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationRoleId) {
		return nil, false
	}
	return o.OrganizationRoleId, true
}

// HasOrganizationRoleId returns a boolean if a field has been set.
func (o *CreateUserRequest) HasOrganizationRoleId() bool {
	if o != nil && !IsNil(o.OrganizationRoleId) {
		return true
	}

	return false
}

// SetOrganizationRoleId gets a reference to the given string and assigns it to the OrganizationRoleId field.
func (o *CreateUserRequest) SetOrganizationRoleId(v string) {
	o.OrganizationRoleId = &v
}

// GetGroupRoleId returns the GroupRoleId field value if set, zero value otherwise.
func (o *CreateUserRequest) GetGroupRoleId() string {
	if o == nil || IsNil(o.GroupRoleId) {
		var ret string
		return ret
	}
	return *o.GroupRoleId
}

// GetGroupRoleIdOk returns a tuple with the GroupRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetGroupRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupRoleId) {
		return nil, false
	}
	return o.GroupRoleId, true
}

// HasGroupRoleId returns a boolean if a field has been set.
func (o *CreateUserRequest) HasGroupRoleId() bool {
	if o != nil && !IsNil(o.GroupRoleId) {
		return true
	}

	return false
}

// SetGroupRoleId gets a reference to the given string and assigns it to the GroupRoleId field.
func (o *CreateUserRequest) SetGroupRoleId(v string) {
	o.GroupRoleId = &v
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *CreateUserRequest) GetGroupIds() []string {
	if o == nil || IsNil(o.GroupIds) {
		var ret []string
		return ret
	}
	return o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserRequest) GetGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupIds) {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *CreateUserRequest) HasGroupIds() bool {
	if o != nil && !IsNil(o.GroupIds) {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given []string and assigns it to the GroupIds field.
func (o *CreateUserRequest) SetGroupIds(v []string) {
	o.GroupIds = v
}

func (o CreateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["email"] = o.Email
	if !IsNil(o.OrganizationRoleId) {
		toSerialize["organizationRoleId"] = o.OrganizationRoleId
	}
	if !IsNil(o.GroupRoleId) {
		toSerialize["groupRoleId"] = o.GroupRoleId
	}
	if !IsNil(o.GroupIds) {
		toSerialize["groupIds"] = o.GroupIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserRequest := _CreateUserRequest{}

	err = json.Unmarshal(data, &varCreateUserRequest)

	if err != nil {
		return err
	}

	*o = CreateUserRequest(varCreateUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "organizationRoleId")
		delete(additionalProperties, "groupRoleId")
		delete(additionalProperties, "groupIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUserRequest struct {
	value *CreateUserRequest
	isSet bool
}

func (v NullableCreateUserRequest) Get() *CreateUserRequest {
	return v.value
}

func (v *NullableCreateUserRequest) Set(val *CreateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserRequest(val *CreateUserRequest) *NullableCreateUserRequest {
	return &NullableCreateUserRequest{value: val, isSet: true}
}

func (v NullableCreateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


