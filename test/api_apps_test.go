/*
arborxr-api-v2

Testing AppsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package arborapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/heru-inc/arbor-api-go"
)

func Test_arborapi_AppsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppsAPIService AppsApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.AppsAPI.AppsApp(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppsAPI.AppsApps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsCompleteVersionUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var versionId string

		resp, httpRes, err := apiClient.AppsAPI.AppsCompleteVersionUpload(context.Background(), appId, versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsPreSignVersionUploadUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var versionId string

		resp, httpRes, err := apiClient.AppsAPI.AppsPreSignVersionUploadUrl(context.Background(), appId, versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsReleaseChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var releaseChannelId string

		resp, httpRes, err := apiClient.AppsAPI.AppsReleaseChannel(context.Background(), appId, releaseChannelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsReleaseChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.AppsAPI.AppsReleaseChannels(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsRevokeReleaseChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var releaseChannelId string

		resp, httpRes, err := apiClient.AppsAPI.AppsRevokeReleaseChannel(context.Background(), appId, releaseChannelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsShareReleaseChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var releaseChannelId string

		resp, httpRes, err := apiClient.AppsAPI.AppsShareReleaseChannel(context.Background(), appId, releaseChannelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsStartVersionUpload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.AppsAPI.AppsStartVersionUpload(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsUpdateApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.AppsAPI.AppsUpdateApp(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsUpdateReleaseChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var releaseChannelId string

		resp, httpRes, err := apiClient.AppsAPI.AppsUpdateReleaseChannel(context.Background(), appId, releaseChannelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppsAPIService AppsVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.AppsAPI.AppsVersions(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
