/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CompleteUploadAppVersionValidationErrorBodyErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteUploadAppVersionValidationErrorBodyErrors{}

// CompleteUploadAppVersionValidationErrorBodyErrors struct for CompleteUploadAppVersionValidationErrorBodyErrors
type CompleteUploadAppVersionValidationErrorBodyErrors struct {
	Key []string `json:"key,omitempty"`
	UploadId []string `json:"uploadId,omitempty"`
	Parts []string `json:"parts,omitempty"`
	Parts0PartNumber []string `json:"parts.0.partNumber,omitempty"`
	Parts1PartNumber []string `json:"parts.1.partNumber,omitempty"`
	Parts0ETag []string `json:"parts.0.eTag,omitempty"`
	Parts1ETag []string `json:"parts.1.eTag,omitempty"`
	VersionName []string `json:"versionName,omitempty"`
	ReleaseNotes []string `json:"releaseNotes,omitempty"`
}

// NewCompleteUploadAppVersionValidationErrorBodyErrors instantiates a new CompleteUploadAppVersionValidationErrorBodyErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteUploadAppVersionValidationErrorBodyErrors() *CompleteUploadAppVersionValidationErrorBodyErrors {
	this := CompleteUploadAppVersionValidationErrorBodyErrors{}
	return &this
}

// NewCompleteUploadAppVersionValidationErrorBodyErrorsWithDefaults instantiates a new CompleteUploadAppVersionValidationErrorBodyErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteUploadAppVersionValidationErrorBodyErrorsWithDefaults() *CompleteUploadAppVersionValidationErrorBodyErrors {
	this := CompleteUploadAppVersionValidationErrorBodyErrors{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetKey() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetKeyOk() ([]string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasKey() bool {
	if o != nil && IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given []string and assigns it to the Key field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetKey(v []string) {
	o.Key = v
}

// GetUploadId returns the UploadId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetUploadId() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetUploadIdOk() ([]string, bool) {
	if o == nil || IsNil(o.UploadId) {
		return nil, false
	}
	return o.UploadId, true
}

// HasUploadId returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasUploadId() bool {
	if o != nil && IsNil(o.UploadId) {
		return true
	}

	return false
}

// SetUploadId gets a reference to the given []string and assigns it to the UploadId field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetUploadId(v []string) {
	o.UploadId = v
}

// GetParts returns the Parts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetPartsOk() ([]string, bool) {
	if o == nil || IsNil(o.Parts) {
		return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasParts() bool {
	if o != nil && IsNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given []string and assigns it to the Parts field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetParts(v []string) {
	o.Parts = v
}

// GetParts0PartNumber returns the Parts0PartNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts0PartNumber() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parts0PartNumber
}

// GetParts0PartNumberOk returns a tuple with the Parts0PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts0PartNumberOk() ([]string, bool) {
	if o == nil || IsNil(o.Parts0PartNumber) {
		return nil, false
	}
	return o.Parts0PartNumber, true
}

// HasParts0PartNumber returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasParts0PartNumber() bool {
	if o != nil && IsNil(o.Parts0PartNumber) {
		return true
	}

	return false
}

// SetParts0PartNumber gets a reference to the given []string and assigns it to the Parts0PartNumber field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetParts0PartNumber(v []string) {
	o.Parts0PartNumber = v
}

// GetParts1PartNumber returns the Parts1PartNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts1PartNumber() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parts1PartNumber
}

// GetParts1PartNumberOk returns a tuple with the Parts1PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts1PartNumberOk() ([]string, bool) {
	if o == nil || IsNil(o.Parts1PartNumber) {
		return nil, false
	}
	return o.Parts1PartNumber, true
}

// HasParts1PartNumber returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasParts1PartNumber() bool {
	if o != nil && IsNil(o.Parts1PartNumber) {
		return true
	}

	return false
}

// SetParts1PartNumber gets a reference to the given []string and assigns it to the Parts1PartNumber field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetParts1PartNumber(v []string) {
	o.Parts1PartNumber = v
}

// GetParts0ETag returns the Parts0ETag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts0ETag() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parts0ETag
}

// GetParts0ETagOk returns a tuple with the Parts0ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts0ETagOk() ([]string, bool) {
	if o == nil || IsNil(o.Parts0ETag) {
		return nil, false
	}
	return o.Parts0ETag, true
}

// HasParts0ETag returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasParts0ETag() bool {
	if o != nil && IsNil(o.Parts0ETag) {
		return true
	}

	return false
}

// SetParts0ETag gets a reference to the given []string and assigns it to the Parts0ETag field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetParts0ETag(v []string) {
	o.Parts0ETag = v
}

// GetParts1ETag returns the Parts1ETag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts1ETag() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parts1ETag
}

// GetParts1ETagOk returns a tuple with the Parts1ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetParts1ETagOk() ([]string, bool) {
	if o == nil || IsNil(o.Parts1ETag) {
		return nil, false
	}
	return o.Parts1ETag, true
}

// HasParts1ETag returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasParts1ETag() bool {
	if o != nil && IsNil(o.Parts1ETag) {
		return true
	}

	return false
}

// SetParts1ETag gets a reference to the given []string and assigns it to the Parts1ETag field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetParts1ETag(v []string) {
	o.Parts1ETag = v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetVersionName() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetVersionNameOk() ([]string, bool) {
	if o == nil || IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasVersionName() bool {
	if o != nil && IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given []string and assigns it to the VersionName field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetVersionName(v []string) {
	o.VersionName = v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetReleaseNotes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) GetReleaseNotesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReleaseNotes) {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) HasReleaseNotes() bool {
	if o != nil && IsNil(o.ReleaseNotes) {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given []string and assigns it to the ReleaseNotes field.
func (o *CompleteUploadAppVersionValidationErrorBodyErrors) SetReleaseNotes(v []string) {
	o.ReleaseNotes = v
}

func (o CompleteUploadAppVersionValidationErrorBodyErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteUploadAppVersionValidationErrorBodyErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.UploadId != nil {
		toSerialize["uploadId"] = o.UploadId
	}
	if o.Parts != nil {
		toSerialize["parts"] = o.Parts
	}
	if o.Parts0PartNumber != nil {
		toSerialize["parts.0.partNumber"] = o.Parts0PartNumber
	}
	if o.Parts1PartNumber != nil {
		toSerialize["parts.1.partNumber"] = o.Parts1PartNumber
	}
	if o.Parts0ETag != nil {
		toSerialize["parts.0.eTag"] = o.Parts0ETag
	}
	if o.Parts1ETag != nil {
		toSerialize["parts.1.eTag"] = o.Parts1ETag
	}
	if o.VersionName != nil {
		toSerialize["versionName"] = o.VersionName
	}
	if o.ReleaseNotes != nil {
		toSerialize["releaseNotes"] = o.ReleaseNotes
	}
	return toSerialize, nil
}

type NullableCompleteUploadAppVersionValidationErrorBodyErrors struct {
	value *CompleteUploadAppVersionValidationErrorBodyErrors
	isSet bool
}

func (v NullableCompleteUploadAppVersionValidationErrorBodyErrors) Get() *CompleteUploadAppVersionValidationErrorBodyErrors {
	return v.value
}

func (v *NullableCompleteUploadAppVersionValidationErrorBodyErrors) Set(val *CompleteUploadAppVersionValidationErrorBodyErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteUploadAppVersionValidationErrorBodyErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteUploadAppVersionValidationErrorBodyErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteUploadAppVersionValidationErrorBodyErrors(val *CompleteUploadAppVersionValidationErrorBodyErrors) *NullableCompleteUploadAppVersionValidationErrorBodyErrors {
	return &NullableCompleteUploadAppVersionValidationErrorBodyErrors{value: val, isSet: true}
}

func (v NullableCompleteUploadAppVersionValidationErrorBodyErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteUploadAppVersionValidationErrorBodyErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


