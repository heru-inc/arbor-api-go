/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StartVersionUploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartVersionUploadResponse{}

// StartVersionUploadResponse Information about the initiated upload.
type StartVersionUploadResponse struct {
	UploadId string `json:"uploadId"`
	Key string `json:"key"`
	VersionId string `json:"versionId"`
	AdditionalProperties map[string]interface{}
}

type _StartVersionUploadResponse StartVersionUploadResponse

// NewStartVersionUploadResponse instantiates a new StartVersionUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartVersionUploadResponse(uploadId string, key string, versionId string) *StartVersionUploadResponse {
	this := StartVersionUploadResponse{}
	this.UploadId = uploadId
	this.Key = key
	this.VersionId = versionId
	return &this
}

// NewStartVersionUploadResponseWithDefaults instantiates a new StartVersionUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartVersionUploadResponseWithDefaults() *StartVersionUploadResponse {
	this := StartVersionUploadResponse{}
	return &this
}

// GetUploadId returns the UploadId field value
func (o *StartVersionUploadResponse) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *StartVersionUploadResponse) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *StartVersionUploadResponse) SetUploadId(v string) {
	o.UploadId = v
}

// GetKey returns the Key field value
func (o *StartVersionUploadResponse) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *StartVersionUploadResponse) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *StartVersionUploadResponse) SetKey(v string) {
	o.Key = v
}

// GetVersionId returns the VersionId field value
func (o *StartVersionUploadResponse) GetVersionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *StartVersionUploadResponse) GetVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *StartVersionUploadResponse) SetVersionId(v string) {
	o.VersionId = v
}

func (o StartVersionUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartVersionUploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uploadId"] = o.UploadId
	toSerialize["key"] = o.Key
	toSerialize["versionId"] = o.VersionId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StartVersionUploadResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uploadId",
		"key",
		"versionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStartVersionUploadResponse := _StartVersionUploadResponse{}

	err = json.Unmarshal(data, &varStartVersionUploadResponse)

	if err != nil {
		return err
	}

	*o = StartVersionUploadResponse(varStartVersionUploadResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uploadId")
		delete(additionalProperties, "key")
		delete(additionalProperties, "versionId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStartVersionUploadResponse struct {
	value *StartVersionUploadResponse
	isSet bool
}

func (v NullableStartVersionUploadResponse) Get() *StartVersionUploadResponse {
	return v.value
}

func (v *NullableStartVersionUploadResponse) Set(val *StartVersionUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStartVersionUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStartVersionUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartVersionUploadResponse(val *StartVersionUploadResponse) *NullableStartVersionUploadResponse {
	return &NullableStartVersionUploadResponse{value: val, isSet: true}
}

func (v NullableStartVersionUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartVersionUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


