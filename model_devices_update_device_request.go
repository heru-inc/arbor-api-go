/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevicesUpdateDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesUpdateDeviceRequest{}

// DevicesUpdateDeviceRequest struct for DevicesUpdateDeviceRequest
type DevicesUpdateDeviceRequest struct {
	Title NullableString `json:"title,omitempty"`
	DeviceGroupId NullableString `json:"deviceGroupId,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

// NewDevicesUpdateDeviceRequest instantiates a new DevicesUpdateDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesUpdateDeviceRequest() *DevicesUpdateDeviceRequest {
	this := DevicesUpdateDeviceRequest{}
	return &this
}

// NewDevicesUpdateDeviceRequestWithDefaults instantiates a new DevicesUpdateDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesUpdateDeviceRequestWithDefaults() *DevicesUpdateDeviceRequest {
	this := DevicesUpdateDeviceRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DevicesUpdateDeviceRequest) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DevicesUpdateDeviceRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *DevicesUpdateDeviceRequest) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *DevicesUpdateDeviceRequest) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *DevicesUpdateDeviceRequest) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *DevicesUpdateDeviceRequest) UnsetTitle() {
	o.Title.Unset()
}

// GetDeviceGroupId returns the DeviceGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DevicesUpdateDeviceRequest) GetDeviceGroupId() string {
	if o == nil || IsNil(o.DeviceGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceGroupId.Get()
}

// GetDeviceGroupIdOk returns a tuple with the DeviceGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DevicesUpdateDeviceRequest) GetDeviceGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceGroupId.Get(), o.DeviceGroupId.IsSet()
}

// HasDeviceGroupId returns a boolean if a field has been set.
func (o *DevicesUpdateDeviceRequest) HasDeviceGroupId() bool {
	if o != nil && o.DeviceGroupId.IsSet() {
		return true
	}

	return false
}

// SetDeviceGroupId gets a reference to the given NullableString and assigns it to the DeviceGroupId field.
func (o *DevicesUpdateDeviceRequest) SetDeviceGroupId(v string) {
	o.DeviceGroupId.Set(&v)
}
// SetDeviceGroupIdNil sets the value for DeviceGroupId to be an explicit nil
func (o *DevicesUpdateDeviceRequest) SetDeviceGroupIdNil() {
	o.DeviceGroupId.Set(nil)
}

// UnsetDeviceGroupId ensures that no value is present for DeviceGroupId, not even an explicit nil
func (o *DevicesUpdateDeviceRequest) UnsetDeviceGroupId() {
	o.DeviceGroupId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DevicesUpdateDeviceRequest) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DevicesUpdateDeviceRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DevicesUpdateDeviceRequest) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DevicesUpdateDeviceRequest) SetTags(v []string) {
	o.Tags = v
}

func (o DevicesUpdateDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesUpdateDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.DeviceGroupId.IsSet() {
		toSerialize["deviceGroupId"] = o.DeviceGroupId.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDevicesUpdateDeviceRequest struct {
	value *DevicesUpdateDeviceRequest
	isSet bool
}

func (v NullableDevicesUpdateDeviceRequest) Get() *DevicesUpdateDeviceRequest {
	return v.value
}

func (v *NullableDevicesUpdateDeviceRequest) Set(val *DevicesUpdateDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesUpdateDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesUpdateDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesUpdateDeviceRequest(val *DevicesUpdateDeviceRequest) *NullableDevicesUpdateDeviceRequest {
	return &NullableDevicesUpdateDeviceRequest{value: val, isSet: true}
}

func (v NullableDevicesUpdateDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesUpdateDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


