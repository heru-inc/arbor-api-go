/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UsersCreateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersCreateUserRequest{}

// UsersCreateUserRequest struct for UsersCreateUserRequest
type UsersCreateUserRequest struct {
	FirstName string `json:"firstName"`
	LastName string `json:"lastName"`
	Email string `json:"email"`
	OrganizationRoleId NullableString `json:"organizationRoleId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UsersCreateUserRequest UsersCreateUserRequest

// NewUsersCreateUserRequest instantiates a new UsersCreateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersCreateUserRequest(firstName string, lastName string, email string) *UsersCreateUserRequest {
	this := UsersCreateUserRequest{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Email = email
	return &this
}

// NewUsersCreateUserRequestWithDefaults instantiates a new UsersCreateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersCreateUserRequestWithDefaults() *UsersCreateUserRequest {
	this := UsersCreateUserRequest{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *UsersCreateUserRequest) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UsersCreateUserRequest) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UsersCreateUserRequest) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UsersCreateUserRequest) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UsersCreateUserRequest) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UsersCreateUserRequest) SetLastName(v string) {
	o.LastName = v
}

// GetEmail returns the Email field value
func (o *UsersCreateUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UsersCreateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UsersCreateUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetOrganizationRoleId returns the OrganizationRoleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersCreateUserRequest) GetOrganizationRoleId() string {
	if o == nil || IsNil(o.OrganizationRoleId.Get()) {
		var ret string
		return ret
	}
	return *o.OrganizationRoleId.Get()
}

// GetOrganizationRoleIdOk returns a tuple with the OrganizationRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersCreateUserRequest) GetOrganizationRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationRoleId.Get(), o.OrganizationRoleId.IsSet()
}

// HasOrganizationRoleId returns a boolean if a field has been set.
func (o *UsersCreateUserRequest) HasOrganizationRoleId() bool {
	if o != nil && o.OrganizationRoleId.IsSet() {
		return true
	}

	return false
}

// SetOrganizationRoleId gets a reference to the given NullableString and assigns it to the OrganizationRoleId field.
func (o *UsersCreateUserRequest) SetOrganizationRoleId(v string) {
	o.OrganizationRoleId.Set(&v)
}
// SetOrganizationRoleIdNil sets the value for OrganizationRoleId to be an explicit nil
func (o *UsersCreateUserRequest) SetOrganizationRoleIdNil() {
	o.OrganizationRoleId.Set(nil)
}

// UnsetOrganizationRoleId ensures that no value is present for OrganizationRoleId, not even an explicit nil
func (o *UsersCreateUserRequest) UnsetOrganizationRoleId() {
	o.OrganizationRoleId.Unset()
}

func (o UsersCreateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersCreateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["email"] = o.Email
	if o.OrganizationRoleId.IsSet() {
		toSerialize["organizationRoleId"] = o.OrganizationRoleId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UsersCreateUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsersCreateUserRequest := _UsersCreateUserRequest{}

	err = json.Unmarshal(data, &varUsersCreateUserRequest)

	if err != nil {
		return err
	}

	*o = UsersCreateUserRequest(varUsersCreateUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "organizationRoleId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsersCreateUserRequest struct {
	value *UsersCreateUserRequest
	isSet bool
}

func (v NullableUsersCreateUserRequest) Get() *UsersCreateUserRequest {
	return v.value
}

func (v *NullableUsersCreateUserRequest) Set(val *UsersCreateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersCreateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersCreateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersCreateUserRequest(val *UsersCreateUserRequest) *NullableUsersCreateUserRequest {
	return &NullableUsersCreateUserRequest{value: val, isSet: true}
}

func (v NullableUsersCreateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersCreateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


