/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CompleteFileUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteFileUploadRequest{}

// CompleteFileUploadRequest struct for CompleteFileUploadRequest
type CompleteFileUploadRequest struct {
	Key string `json:"key"`
	UploadId string `json:"uploadId"`
	Parts []CompleteAppVersionUploadRequestPartsInner `json:"parts"`
	ConflictStrategy *string `json:"conflictStrategy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompleteFileUploadRequest CompleteFileUploadRequest

// NewCompleteFileUploadRequest instantiates a new CompleteFileUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteFileUploadRequest(key string, uploadId string, parts []CompleteAppVersionUploadRequestPartsInner) *CompleteFileUploadRequest {
	this := CompleteFileUploadRequest{}
	this.Key = key
	this.UploadId = uploadId
	this.Parts = parts
	return &this
}

// NewCompleteFileUploadRequestWithDefaults instantiates a new CompleteFileUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteFileUploadRequestWithDefaults() *CompleteFileUploadRequest {
	this := CompleteFileUploadRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *CompleteFileUploadRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CompleteFileUploadRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CompleteFileUploadRequest) SetKey(v string) {
	o.Key = v
}

// GetUploadId returns the UploadId field value
func (o *CompleteFileUploadRequest) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *CompleteFileUploadRequest) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *CompleteFileUploadRequest) SetUploadId(v string) {
	o.UploadId = v
}

// GetParts returns the Parts field value
func (o *CompleteFileUploadRequest) GetParts() []CompleteAppVersionUploadRequestPartsInner {
	if o == nil {
		var ret []CompleteAppVersionUploadRequestPartsInner
		return ret
	}

	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value
// and a boolean to check if the value has been set.
func (o *CompleteFileUploadRequest) GetPartsOk() ([]CompleteAppVersionUploadRequestPartsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parts, true
}

// SetParts sets field value
func (o *CompleteFileUploadRequest) SetParts(v []CompleteAppVersionUploadRequestPartsInner) {
	o.Parts = v
}

// GetConflictStrategy returns the ConflictStrategy field value if set, zero value otherwise.
func (o *CompleteFileUploadRequest) GetConflictStrategy() string {
	if o == nil || IsNil(o.ConflictStrategy) {
		var ret string
		return ret
	}
	return *o.ConflictStrategy
}

// GetConflictStrategyOk returns a tuple with the ConflictStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteFileUploadRequest) GetConflictStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.ConflictStrategy) {
		return nil, false
	}
	return o.ConflictStrategy, true
}

// HasConflictStrategy returns a boolean if a field has been set.
func (o *CompleteFileUploadRequest) HasConflictStrategy() bool {
	if o != nil && !IsNil(o.ConflictStrategy) {
		return true
	}

	return false
}

// SetConflictStrategy gets a reference to the given string and assigns it to the ConflictStrategy field.
func (o *CompleteFileUploadRequest) SetConflictStrategy(v string) {
	o.ConflictStrategy = &v
}

func (o CompleteFileUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteFileUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["uploadId"] = o.UploadId
	toSerialize["parts"] = o.Parts
	if !IsNil(o.ConflictStrategy) {
		toSerialize["conflictStrategy"] = o.ConflictStrategy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompleteFileUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"uploadId",
		"parts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteFileUploadRequest := _CompleteFileUploadRequest{}

	err = json.Unmarshal(data, &varCompleteFileUploadRequest)

	if err != nil {
		return err
	}

	*o = CompleteFileUploadRequest(varCompleteFileUploadRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "uploadId")
		delete(additionalProperties, "parts")
		delete(additionalProperties, "conflictStrategy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompleteFileUploadRequest struct {
	value *CompleteFileUploadRequest
	isSet bool
}

func (v NullableCompleteFileUploadRequest) Get() *CompleteFileUploadRequest {
	return v.value
}

func (v *NullableCompleteFileUploadRequest) Set(val *CompleteFileUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteFileUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteFileUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteFileUploadRequest(val *CompleteFileUploadRequest) *NullableCompleteFileUploadRequest {
	return &NullableCompleteFileUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteFileUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteFileUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


