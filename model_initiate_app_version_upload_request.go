/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InitiateAppVersionUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitiateAppVersionUploadRequest{}

// InitiateAppVersionUploadRequest struct for InitiateAppVersionUploadRequest
type InitiateAppVersionUploadRequest struct {
	Filename string `json:"filename"`
	// Mutually exclusive from newReleaseChannelTitle
	ReleaseChannelId *string `json:"releaseChannelId,omitempty"`
	// Mutually exclusive from releaseChannelId
	NewReleaseChannelTitle *string `json:"newReleaseChannelTitle,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InitiateAppVersionUploadRequest InitiateAppVersionUploadRequest

// NewInitiateAppVersionUploadRequest instantiates a new InitiateAppVersionUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiateAppVersionUploadRequest(filename string) *InitiateAppVersionUploadRequest {
	this := InitiateAppVersionUploadRequest{}
	this.Filename = filename
	return &this
}

// NewInitiateAppVersionUploadRequestWithDefaults instantiates a new InitiateAppVersionUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiateAppVersionUploadRequestWithDefaults() *InitiateAppVersionUploadRequest {
	this := InitiateAppVersionUploadRequest{}
	return &this
}

// GetFilename returns the Filename field value
func (o *InitiateAppVersionUploadRequest) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *InitiateAppVersionUploadRequest) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *InitiateAppVersionUploadRequest) SetFilename(v string) {
	o.Filename = v
}

// GetReleaseChannelId returns the ReleaseChannelId field value if set, zero value otherwise.
func (o *InitiateAppVersionUploadRequest) GetReleaseChannelId() string {
	if o == nil || IsNil(o.ReleaseChannelId) {
		var ret string
		return ret
	}
	return *o.ReleaseChannelId
}

// GetReleaseChannelIdOk returns a tuple with the ReleaseChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateAppVersionUploadRequest) GetReleaseChannelIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseChannelId) {
		return nil, false
	}
	return o.ReleaseChannelId, true
}

// HasReleaseChannelId returns a boolean if a field has been set.
func (o *InitiateAppVersionUploadRequest) HasReleaseChannelId() bool {
	if o != nil && !IsNil(o.ReleaseChannelId) {
		return true
	}

	return false
}

// SetReleaseChannelId gets a reference to the given string and assigns it to the ReleaseChannelId field.
func (o *InitiateAppVersionUploadRequest) SetReleaseChannelId(v string) {
	o.ReleaseChannelId = &v
}

// GetNewReleaseChannelTitle returns the NewReleaseChannelTitle field value if set, zero value otherwise.
func (o *InitiateAppVersionUploadRequest) GetNewReleaseChannelTitle() string {
	if o == nil || IsNil(o.NewReleaseChannelTitle) {
		var ret string
		return ret
	}
	return *o.NewReleaseChannelTitle
}

// GetNewReleaseChannelTitleOk returns a tuple with the NewReleaseChannelTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitiateAppVersionUploadRequest) GetNewReleaseChannelTitleOk() (*string, bool) {
	if o == nil || IsNil(o.NewReleaseChannelTitle) {
		return nil, false
	}
	return o.NewReleaseChannelTitle, true
}

// HasNewReleaseChannelTitle returns a boolean if a field has been set.
func (o *InitiateAppVersionUploadRequest) HasNewReleaseChannelTitle() bool {
	if o != nil && !IsNil(o.NewReleaseChannelTitle) {
		return true
	}

	return false
}

// SetNewReleaseChannelTitle gets a reference to the given string and assigns it to the NewReleaseChannelTitle field.
func (o *InitiateAppVersionUploadRequest) SetNewReleaseChannelTitle(v string) {
	o.NewReleaseChannelTitle = &v
}

func (o InitiateAppVersionUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitiateAppVersionUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	if !IsNil(o.ReleaseChannelId) {
		toSerialize["releaseChannelId"] = o.ReleaseChannelId
	}
	if !IsNil(o.NewReleaseChannelTitle) {
		toSerialize["newReleaseChannelTitle"] = o.NewReleaseChannelTitle
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InitiateAppVersionUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInitiateAppVersionUploadRequest := _InitiateAppVersionUploadRequest{}

	err = json.Unmarshal(data, &varInitiateAppVersionUploadRequest)

	if err != nil {
		return err
	}

	*o = InitiateAppVersionUploadRequest(varInitiateAppVersionUploadRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filename")
		delete(additionalProperties, "releaseChannelId")
		delete(additionalProperties, "newReleaseChannelTitle")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInitiateAppVersionUploadRequest struct {
	value *InitiateAppVersionUploadRequest
	isSet bool
}

func (v NullableInitiateAppVersionUploadRequest) Get() *InitiateAppVersionUploadRequest {
	return v.value
}

func (v *NullableInitiateAppVersionUploadRequest) Set(val *InitiateAppVersionUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiateAppVersionUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiateAppVersionUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiateAppVersionUploadRequest(val *InitiateAppVersionUploadRequest) *NullableInitiateAppVersionUploadRequest {
	return &NullableInitiateAppVersionUploadRequest{value: val, isSet: true}
}

func (v NullableInitiateAppVersionUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiateAppVersionUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


