/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PreSignAppVersionUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreSignAppVersionUploadRequest{}

// PreSignAppVersionUploadRequest struct for PreSignAppVersionUploadRequest
type PreSignAppVersionUploadRequest struct {
	Key string `json:"key"`
	UploadId string `json:"uploadId"`
	PartNumbers []int32 `json:"partNumbers"`
	AdditionalProperties map[string]interface{}
}

type _PreSignAppVersionUploadRequest PreSignAppVersionUploadRequest

// NewPreSignAppVersionUploadRequest instantiates a new PreSignAppVersionUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreSignAppVersionUploadRequest(key string, uploadId string, partNumbers []int32) *PreSignAppVersionUploadRequest {
	this := PreSignAppVersionUploadRequest{}
	this.Key = key
	this.UploadId = uploadId
	this.PartNumbers = partNumbers
	return &this
}

// NewPreSignAppVersionUploadRequestWithDefaults instantiates a new PreSignAppVersionUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreSignAppVersionUploadRequestWithDefaults() *PreSignAppVersionUploadRequest {
	this := PreSignAppVersionUploadRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *PreSignAppVersionUploadRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PreSignAppVersionUploadRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PreSignAppVersionUploadRequest) SetKey(v string) {
	o.Key = v
}

// GetUploadId returns the UploadId field value
func (o *PreSignAppVersionUploadRequest) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *PreSignAppVersionUploadRequest) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *PreSignAppVersionUploadRequest) SetUploadId(v string) {
	o.UploadId = v
}

// GetPartNumbers returns the PartNumbers field value
func (o *PreSignAppVersionUploadRequest) GetPartNumbers() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.PartNumbers
}

// GetPartNumbersOk returns a tuple with the PartNumbers field value
// and a boolean to check if the value has been set.
func (o *PreSignAppVersionUploadRequest) GetPartNumbersOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartNumbers, true
}

// SetPartNumbers sets field value
func (o *PreSignAppVersionUploadRequest) SetPartNumbers(v []int32) {
	o.PartNumbers = v
}

func (o PreSignAppVersionUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreSignAppVersionUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["uploadId"] = o.UploadId
	toSerialize["partNumbers"] = o.PartNumbers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PreSignAppVersionUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"uploadId",
		"partNumbers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPreSignAppVersionUploadRequest := _PreSignAppVersionUploadRequest{}

	err = json.Unmarshal(data, &varPreSignAppVersionUploadRequest)

	if err != nil {
		return err
	}

	*o = PreSignAppVersionUploadRequest(varPreSignAppVersionUploadRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "uploadId")
		delete(additionalProperties, "partNumbers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePreSignAppVersionUploadRequest struct {
	value *PreSignAppVersionUploadRequest
	isSet bool
}

func (v NullablePreSignAppVersionUploadRequest) Get() *PreSignAppVersionUploadRequest {
	return v.value
}

func (v *NullablePreSignAppVersionUploadRequest) Set(val *PreSignAppVersionUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePreSignAppVersionUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePreSignAppVersionUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreSignAppVersionUploadRequest(val *PreSignAppVersionUploadRequest) *NullablePreSignAppVersionUploadRequest {
	return &NullablePreSignAppVersionUploadRequest{value: val, isSet: true}
}

func (v NullablePreSignAppVersionUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreSignAppVersionUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


