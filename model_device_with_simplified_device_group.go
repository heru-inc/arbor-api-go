/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DeviceWithSimplifiedDeviceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceWithSimplifiedDeviceGroup{}

// DeviceWithSimplifiedDeviceGroup Represents a device that is managed by your organization with a simplified group object and connectivity status.
type DeviceWithSimplifiedDeviceGroup struct {
	Id string `json:"id"`
	Title string `json:"title"`
	SerialNumber string `json:"serialNumber"`
	DeviceGroup *SimplifiedDeviceGroup `json:"deviceGroup,omitempty"`
	Model string `json:"model"`
	Tags []string `json:"tags"`
	LastCommunicatedAt time.Time `json:"lastCommunicatedAt"`
	IsOnline bool `json:"isOnline"`
}

type _DeviceWithSimplifiedDeviceGroup DeviceWithSimplifiedDeviceGroup

// NewDeviceWithSimplifiedDeviceGroup instantiates a new DeviceWithSimplifiedDeviceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceWithSimplifiedDeviceGroup(id string, title string, serialNumber string, model string, tags []string, lastCommunicatedAt time.Time, isOnline bool) *DeviceWithSimplifiedDeviceGroup {
	this := DeviceWithSimplifiedDeviceGroup{}
	this.Id = id
	this.Title = title
	this.SerialNumber = serialNumber
	this.Model = model
	this.Tags = tags
	this.LastCommunicatedAt = lastCommunicatedAt
	this.IsOnline = isOnline
	return &this
}

// NewDeviceWithSimplifiedDeviceGroupWithDefaults instantiates a new DeviceWithSimplifiedDeviceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithSimplifiedDeviceGroupWithDefaults() *DeviceWithSimplifiedDeviceGroup {
	this := DeviceWithSimplifiedDeviceGroup{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceWithSimplifiedDeviceGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *DeviceWithSimplifiedDeviceGroup) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetTitle(v string) {
	o.Title = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *DeviceWithSimplifiedDeviceGroup) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetDeviceGroup returns the DeviceGroup field value if set, zero value otherwise.
func (o *DeviceWithSimplifiedDeviceGroup) GetDeviceGroup() SimplifiedDeviceGroup {
	if o == nil || IsNil(o.DeviceGroup) {
		var ret SimplifiedDeviceGroup
		return ret
	}
	return *o.DeviceGroup
}

// GetDeviceGroupOk returns a tuple with the DeviceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetDeviceGroupOk() (*SimplifiedDeviceGroup, bool) {
	if o == nil || IsNil(o.DeviceGroup) {
		return nil, false
	}
	return o.DeviceGroup, true
}

// HasDeviceGroup returns a boolean if a field has been set.
func (o *DeviceWithSimplifiedDeviceGroup) HasDeviceGroup() bool {
	if o != nil && !IsNil(o.DeviceGroup) {
		return true
	}

	return false
}

// SetDeviceGroup gets a reference to the given SimplifiedDeviceGroup and assigns it to the DeviceGroup field.
func (o *DeviceWithSimplifiedDeviceGroup) SetDeviceGroup(v SimplifiedDeviceGroup) {
	o.DeviceGroup = &v
}

// GetModel returns the Model field value
func (o *DeviceWithSimplifiedDeviceGroup) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetModel(v string) {
	o.Model = v
}

// GetTags returns the Tags field value
func (o *DeviceWithSimplifiedDeviceGroup) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetTags(v []string) {
	o.Tags = v
}

// GetLastCommunicatedAt returns the LastCommunicatedAt field value
func (o *DeviceWithSimplifiedDeviceGroup) GetLastCommunicatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastCommunicatedAt
}

// GetLastCommunicatedAtOk returns a tuple with the LastCommunicatedAt field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetLastCommunicatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastCommunicatedAt, true
}

// SetLastCommunicatedAt sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetLastCommunicatedAt(v time.Time) {
	o.LastCommunicatedAt = v
}

// GetIsOnline returns the IsOnline field value
func (o *DeviceWithSimplifiedDeviceGroup) GetIsOnline() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOnline
}

// GetIsOnlineOk returns a tuple with the IsOnline field value
// and a boolean to check if the value has been set.
func (o *DeviceWithSimplifiedDeviceGroup) GetIsOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOnline, true
}

// SetIsOnline sets field value
func (o *DeviceWithSimplifiedDeviceGroup) SetIsOnline(v bool) {
	o.IsOnline = v
}

func (o DeviceWithSimplifiedDeviceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceWithSimplifiedDeviceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["serialNumber"] = o.SerialNumber
	if !IsNil(o.DeviceGroup) {
		toSerialize["deviceGroup"] = o.DeviceGroup
	}
	toSerialize["model"] = o.Model
	toSerialize["tags"] = o.Tags
	toSerialize["lastCommunicatedAt"] = o.LastCommunicatedAt
	toSerialize["isOnline"] = o.IsOnline
	return toSerialize, nil
}

func (o *DeviceWithSimplifiedDeviceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"serialNumber",
		"model",
		"tags",
		"lastCommunicatedAt",
		"isOnline",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceWithSimplifiedDeviceGroup := _DeviceWithSimplifiedDeviceGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceWithSimplifiedDeviceGroup)

	if err != nil {
		return err
	}

	*o = DeviceWithSimplifiedDeviceGroup(varDeviceWithSimplifiedDeviceGroup)

	return err
}

type NullableDeviceWithSimplifiedDeviceGroup struct {
	value *DeviceWithSimplifiedDeviceGroup
	isSet bool
}

func (v NullableDeviceWithSimplifiedDeviceGroup) Get() *DeviceWithSimplifiedDeviceGroup {
	return v.value
}

func (v *NullableDeviceWithSimplifiedDeviceGroup) Set(val *DeviceWithSimplifiedDeviceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceWithSimplifiedDeviceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceWithSimplifiedDeviceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceWithSimplifiedDeviceGroup(val *DeviceWithSimplifiedDeviceGroup) *NullableDeviceWithSimplifiedDeviceGroup {
	return &NullableDeviceWithSimplifiedDeviceGroup{value: val, isSet: true}
}

func (v NullableDeviceWithSimplifiedDeviceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceWithSimplifiedDeviceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


