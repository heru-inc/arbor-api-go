/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CheckFingerprintRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckFingerprintRequest{}

// CheckFingerprintRequest struct for CheckFingerprintRequest
type CheckFingerprintRequest struct {
	Fingerprint string `json:"fingerprint"`
	AdditionalProperties map[string]interface{}
}

type _CheckFingerprintRequest CheckFingerprintRequest

// NewCheckFingerprintRequest instantiates a new CheckFingerprintRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckFingerprintRequest(fingerprint string) *CheckFingerprintRequest {
	this := CheckFingerprintRequest{}
	this.Fingerprint = fingerprint
	return &this
}

// NewCheckFingerprintRequestWithDefaults instantiates a new CheckFingerprintRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckFingerprintRequestWithDefaults() *CheckFingerprintRequest {
	this := CheckFingerprintRequest{}
	return &this
}

// GetFingerprint returns the Fingerprint field value
func (o *CheckFingerprintRequest) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *CheckFingerprintRequest) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *CheckFingerprintRequest) SetFingerprint(v string) {
	o.Fingerprint = v
}

func (o CheckFingerprintRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckFingerprintRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fingerprint"] = o.Fingerprint

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CheckFingerprintRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fingerprint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckFingerprintRequest := _CheckFingerprintRequest{}

	err = json.Unmarshal(data, &varCheckFingerprintRequest)

	if err != nil {
		return err
	}

	*o = CheckFingerprintRequest(varCheckFingerprintRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fingerprint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckFingerprintRequest struct {
	value *CheckFingerprintRequest
	isSet bool
}

func (v NullableCheckFingerprintRequest) Get() *CheckFingerprintRequest {
	return v.value
}

func (v *NullableCheckFingerprintRequest) Set(val *CheckFingerprintRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckFingerprintRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckFingerprintRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckFingerprintRequest(val *CheckFingerprintRequest) *NullableCheckFingerprintRequest {
	return &NullableCheckFingerprintRequest{value: val, isSet: true}
}

func (v NullableCheckFingerprintRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckFingerprintRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


