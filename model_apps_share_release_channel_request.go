/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arbor-api-go

import (
	"encoding/json"
	"fmt"
)

// checks if the AppsShareReleaseChannelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppsShareReleaseChannelRequest{}

// AppsShareReleaseChannelRequest struct for AppsShareReleaseChannelRequest
type AppsShareReleaseChannelRequest struct {
	OrganizationSlug string `json:"organizationSlug"`
	AdditionalProperties map[string]interface{}
}

type _AppsShareReleaseChannelRequest AppsShareReleaseChannelRequest

// NewAppsShareReleaseChannelRequest instantiates a new AppsShareReleaseChannelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsShareReleaseChannelRequest(organizationSlug string) *AppsShareReleaseChannelRequest {
	this := AppsShareReleaseChannelRequest{}
	this.OrganizationSlug = organizationSlug
	return &this
}

// NewAppsShareReleaseChannelRequestWithDefaults instantiates a new AppsShareReleaseChannelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsShareReleaseChannelRequestWithDefaults() *AppsShareReleaseChannelRequest {
	this := AppsShareReleaseChannelRequest{}
	return &this
}

// GetOrganizationSlug returns the OrganizationSlug field value
func (o *AppsShareReleaseChannelRequest) GetOrganizationSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationSlug
}

// GetOrganizationSlugOk returns a tuple with the OrganizationSlug field value
// and a boolean to check if the value has been set.
func (o *AppsShareReleaseChannelRequest) GetOrganizationSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationSlug, true
}

// SetOrganizationSlug sets field value
func (o *AppsShareReleaseChannelRequest) SetOrganizationSlug(v string) {
	o.OrganizationSlug = v
}

func (o AppsShareReleaseChannelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppsShareReleaseChannelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationSlug"] = o.OrganizationSlug

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppsShareReleaseChannelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationSlug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppsShareReleaseChannelRequest := _AppsShareReleaseChannelRequest{}

	err = json.Unmarshal(data, &varAppsShareReleaseChannelRequest)

	if err != nil {
		return err
	}

	*o = AppsShareReleaseChannelRequest(varAppsShareReleaseChannelRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "organizationSlug")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppsShareReleaseChannelRequest struct {
	value *AppsShareReleaseChannelRequest
	isSet bool
}

func (v NullableAppsShareReleaseChannelRequest) Get() *AppsShareReleaseChannelRequest {
	return v.value
}

func (v *NullableAppsShareReleaseChannelRequest) Set(val *AppsShareReleaseChannelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsShareReleaseChannelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsShareReleaseChannelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsShareReleaseChannelRequest(val *AppsShareReleaseChannelRequest) *NullableAppsShareReleaseChannelRequest {
	return &NullableAppsShareReleaseChannelRequest{value: val, isSet: true}
}

func (v NullableAppsShareReleaseChannelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsShareReleaseChannelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


