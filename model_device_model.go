/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceModel{}

// DeviceModel Represents a device model (e.g. Meta Quest 2, Pico Neo 3, etc.) that is in use in your organization.
type DeviceModel struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Manufacturer string `json:"manufacturer"`
}

type _DeviceModel DeviceModel

// NewDeviceModel instantiates a new DeviceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceModel(id string, name string, manufacturer string) *DeviceModel {
	this := DeviceModel{}
	this.Id = id
	this.Name = name
	this.Manufacturer = manufacturer
	return &this
}

// NewDeviceModelWithDefaults instantiates a new DeviceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceModelWithDefaults() *DeviceModel {
	this := DeviceModel{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DeviceModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceModel) SetName(v string) {
	o.Name = v
}

// GetManufacturer returns the Manufacturer field value
func (o *DeviceModel) GetManufacturer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value
// and a boolean to check if the value has been set.
func (o *DeviceModel) GetManufacturerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manufacturer, true
}

// SetManufacturer sets field value
func (o *DeviceModel) SetManufacturer(v string) {
	o.Manufacturer = v
}

func (o DeviceModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["manufacturer"] = o.Manufacturer
	return toSerialize, nil
}

func (o *DeviceModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"manufacturer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceModel := _DeviceModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceModel)

	if err != nil {
		return err
	}

	*o = DeviceModel(varDeviceModel)

	return err
}

type NullableDeviceModel struct {
	value *DeviceModel
	isSet bool
}

func (v NullableDeviceModel) Get() *DeviceModel {
	return v.value
}

func (v *NullableDeviceModel) Set(val *DeviceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceModel(val *DeviceModel) *NullableDeviceModel {
	return &NullableDeviceModel{value: val, isSet: true}
}

func (v NullableDeviceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


