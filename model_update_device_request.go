/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
)

// checks if the UpdateDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDeviceRequest{}

// UpdateDeviceRequest struct for UpdateDeviceRequest
type UpdateDeviceRequest struct {
	Title *string `json:"title,omitempty"`
	DeviceGroupId NullableString `json:"deviceGroupId,omitempty"`
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDeviceRequest UpdateDeviceRequest

// NewUpdateDeviceRequest instantiates a new UpdateDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDeviceRequest() *UpdateDeviceRequest {
	this := UpdateDeviceRequest{}
	return &this
}

// NewUpdateDeviceRequestWithDefaults instantiates a new UpdateDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDeviceRequestWithDefaults() *UpdateDeviceRequest {
	this := UpdateDeviceRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateDeviceRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDeviceRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateDeviceRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateDeviceRequest) SetTitle(v string) {
	o.Title = &v
}

// GetDeviceGroupId returns the DeviceGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDeviceRequest) GetDeviceGroupId() string {
	if o == nil || IsNil(o.DeviceGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceGroupId.Get()
}

// GetDeviceGroupIdOk returns a tuple with the DeviceGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDeviceRequest) GetDeviceGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceGroupId.Get(), o.DeviceGroupId.IsSet()
}

// HasDeviceGroupId returns a boolean if a field has been set.
func (o *UpdateDeviceRequest) HasDeviceGroupId() bool {
	if o != nil && o.DeviceGroupId.IsSet() {
		return true
	}

	return false
}

// SetDeviceGroupId gets a reference to the given NullableString and assigns it to the DeviceGroupId field.
func (o *UpdateDeviceRequest) SetDeviceGroupId(v string) {
	o.DeviceGroupId.Set(&v)
}
// SetDeviceGroupIdNil sets the value for DeviceGroupId to be an explicit nil
func (o *UpdateDeviceRequest) SetDeviceGroupIdNil() {
	o.DeviceGroupId.Set(nil)
}

// UnsetDeviceGroupId ensures that no value is present for DeviceGroupId, not even an explicit nil
func (o *UpdateDeviceRequest) UnsetDeviceGroupId() {
	o.DeviceGroupId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateDeviceRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDeviceRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateDeviceRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateDeviceRequest) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if o.DeviceGroupId.IsSet() {
		toSerialize["deviceGroupId"] = o.DeviceGroupId.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDeviceRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateDeviceRequest := _UpdateDeviceRequest{}

	err = json.Unmarshal(data, &varUpdateDeviceRequest)

	if err != nil {
		return err
	}

	*o = UpdateDeviceRequest(varUpdateDeviceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "deviceGroupId")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDeviceRequest struct {
	value *UpdateDeviceRequest
	isSet bool
}

func (v NullableUpdateDeviceRequest) Get() *UpdateDeviceRequest {
	return v.value
}

func (v *NullableUpdateDeviceRequest) Set(val *UpdateDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDeviceRequest(val *UpdateDeviceRequest) *NullableUpdateDeviceRequest {
	return &NullableUpdateDeviceRequest{value: val, isSet: true}
}

func (v NullableUpdateDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


