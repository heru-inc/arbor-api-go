/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NotFoundErrorBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotFoundErrorBody{}

// NotFoundErrorBody struct for NotFoundErrorBody
type NotFoundErrorBody struct {
	Message string `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _NotFoundErrorBody NotFoundErrorBody

// NewNotFoundErrorBody instantiates a new NotFoundErrorBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotFoundErrorBody(message string) *NotFoundErrorBody {
	this := NotFoundErrorBody{}
	this.Message = message
	return &this
}

// NewNotFoundErrorBodyWithDefaults instantiates a new NotFoundErrorBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotFoundErrorBodyWithDefaults() *NotFoundErrorBody {
	this := NotFoundErrorBody{}
	return &this
}

// GetMessage returns the Message field value
func (o *NotFoundErrorBody) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NotFoundErrorBody) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *NotFoundErrorBody) SetMessage(v string) {
	o.Message = v
}

func (o NotFoundErrorBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotFoundErrorBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NotFoundErrorBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotFoundErrorBody := _NotFoundErrorBody{}

	err = json.Unmarshal(data, &varNotFoundErrorBody)

	if err != nil {
		return err
	}

	*o = NotFoundErrorBody(varNotFoundErrorBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotFoundErrorBody struct {
	value *NotFoundErrorBody
	isSet bool
}

func (v NullableNotFoundErrorBody) Get() *NotFoundErrorBody {
	return v.value
}

func (v *NullableNotFoundErrorBody) Set(val *NotFoundErrorBody) {
	v.value = val
	v.isSet = true
}

func (v NullableNotFoundErrorBody) IsSet() bool {
	return v.isSet
}

func (v *NullableNotFoundErrorBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotFoundErrorBody(val *NotFoundErrorBody) *NullableNotFoundErrorBody {
	return &NullableNotFoundErrorBody{value: val, isSet: true}
}

func (v NullableNotFoundErrorBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotFoundErrorBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


