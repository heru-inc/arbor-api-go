/*
arborxr-api-v2

This API provides a RESTful interface to interact with your organization's data.

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AppWithDeviceModels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppWithDeviceModels{}

// AppWithDeviceModels Represents an app in your content library with a list of device models that it supports.
type AppWithDeviceModels struct {
	DeviceModels []DeviceModel `json:"deviceModels"`
	Id string `json:"id"`
	Title string `json:"title"`
	Description string `json:"description"`
	Tags []string `json:"tags"`
	AdditionalProperties map[string]interface{}
}

type _AppWithDeviceModels AppWithDeviceModels

// NewAppWithDeviceModels instantiates a new AppWithDeviceModels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppWithDeviceModels(deviceModels []DeviceModel, id string, title string, description string, tags []string) *AppWithDeviceModels {
	this := AppWithDeviceModels{}
	this.Id = id
	this.Title = title
	this.Description = description
	this.Tags = tags
	return &this
}

// NewAppWithDeviceModelsWithDefaults instantiates a new AppWithDeviceModels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDeviceModelsWithDefaults() *AppWithDeviceModels {
	this := AppWithDeviceModels{}
	return &this
}

// GetDeviceModels returns the DeviceModels field value
func (o *AppWithDeviceModels) GetDeviceModels() []DeviceModel {
	if o == nil {
		var ret []DeviceModel
		return ret
	}

	return o.DeviceModels
}

// GetDeviceModelsOk returns a tuple with the DeviceModels field value
// and a boolean to check if the value has been set.
func (o *AppWithDeviceModels) GetDeviceModelsOk() ([]DeviceModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceModels, true
}

// SetDeviceModels sets field value
func (o *AppWithDeviceModels) SetDeviceModels(v []DeviceModel) {
	o.DeviceModels = v
}

// GetId returns the Id field value
func (o *AppWithDeviceModels) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppWithDeviceModels) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppWithDeviceModels) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *AppWithDeviceModels) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *AppWithDeviceModels) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *AppWithDeviceModels) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *AppWithDeviceModels) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AppWithDeviceModels) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AppWithDeviceModels) SetDescription(v string) {
	o.Description = v
}

// GetTags returns the Tags field value
func (o *AppWithDeviceModels) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AppWithDeviceModels) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AppWithDeviceModels) SetTags(v []string) {
	o.Tags = v
}

func (o AppWithDeviceModels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppWithDeviceModels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceModels"] = o.DeviceModels
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["tags"] = o.Tags

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppWithDeviceModels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceModels",
		"id",
		"title",
		"description",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppWithDeviceModels := _AppWithDeviceModels{}

	err = json.Unmarshal(data, &varAppWithDeviceModels)

	if err != nil {
		return err
	}

	*o = AppWithDeviceModels(varAppWithDeviceModels)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceModels")
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "description")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppWithDeviceModels struct {
	value *AppWithDeviceModels
	isSet bool
}

func (v NullableAppWithDeviceModels) Get() *AppWithDeviceModels {
	return v.value
}

func (v *NullableAppWithDeviceModels) Set(val *AppWithDeviceModels) {
	v.value = val
	v.isSet = true
}

func (v NullableAppWithDeviceModels) IsSet() bool {
	return v.isSet
}

func (v *NullableAppWithDeviceModels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppWithDeviceModels(val *AppWithDeviceModels) *NullableAppWithDeviceModels {
	return &NullableAppWithDeviceModels{value: val, isSet: true}
}

func (v NullableAppWithDeviceModels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppWithDeviceModels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


