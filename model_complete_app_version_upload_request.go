/*
ArborXR Public API

This API provides a RESTful interface to interact with your organization's data.

API version: v2
Contact: support@arborxr.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arborapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CompleteAppVersionUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteAppVersionUploadRequest{}

// CompleteAppVersionUploadRequest struct for CompleteAppVersionUploadRequest
type CompleteAppVersionUploadRequest struct {
	Key string `json:"key"`
	UploadId string `json:"uploadId"`
	Parts []CompleteAppVersionUploadRequestPartsInner `json:"parts"`
	VersionName NullableString `json:"versionName,omitempty"`
	ReleaseNotes NullableString `json:"releaseNotes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompleteAppVersionUploadRequest CompleteAppVersionUploadRequest

// NewCompleteAppVersionUploadRequest instantiates a new CompleteAppVersionUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteAppVersionUploadRequest(key string, uploadId string, parts []CompleteAppVersionUploadRequestPartsInner) *CompleteAppVersionUploadRequest {
	this := CompleteAppVersionUploadRequest{}
	this.Key = key
	this.UploadId = uploadId
	this.Parts = parts
	return &this
}

// NewCompleteAppVersionUploadRequestWithDefaults instantiates a new CompleteAppVersionUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteAppVersionUploadRequestWithDefaults() *CompleteAppVersionUploadRequest {
	this := CompleteAppVersionUploadRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *CompleteAppVersionUploadRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CompleteAppVersionUploadRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CompleteAppVersionUploadRequest) SetKey(v string) {
	o.Key = v
}

// GetUploadId returns the UploadId field value
func (o *CompleteAppVersionUploadRequest) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *CompleteAppVersionUploadRequest) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *CompleteAppVersionUploadRequest) SetUploadId(v string) {
	o.UploadId = v
}

// GetParts returns the Parts field value
func (o *CompleteAppVersionUploadRequest) GetParts() []CompleteAppVersionUploadRequestPartsInner {
	if o == nil {
		var ret []CompleteAppVersionUploadRequestPartsInner
		return ret
	}

	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value
// and a boolean to check if the value has been set.
func (o *CompleteAppVersionUploadRequest) GetPartsOk() ([]CompleteAppVersionUploadRequestPartsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parts, true
}

// SetParts sets field value
func (o *CompleteAppVersionUploadRequest) SetParts(v []CompleteAppVersionUploadRequestPartsInner) {
	o.Parts = v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteAppVersionUploadRequest) GetVersionName() string {
	if o == nil || IsNil(o.VersionName.Get()) {
		var ret string
		return ret
	}
	return *o.VersionName.Get()
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteAppVersionUploadRequest) GetVersionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionName.Get(), o.VersionName.IsSet()
}

// HasVersionName returns a boolean if a field has been set.
func (o *CompleteAppVersionUploadRequest) HasVersionName() bool {
	if o != nil && o.VersionName.IsSet() {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given NullableString and assigns it to the VersionName field.
func (o *CompleteAppVersionUploadRequest) SetVersionName(v string) {
	o.VersionName.Set(&v)
}
// SetVersionNameNil sets the value for VersionName to be an explicit nil
func (o *CompleteAppVersionUploadRequest) SetVersionNameNil() {
	o.VersionName.Set(nil)
}

// UnsetVersionName ensures that no value is present for VersionName, not even an explicit nil
func (o *CompleteAppVersionUploadRequest) UnsetVersionName() {
	o.VersionName.Unset()
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompleteAppVersionUploadRequest) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes.Get()
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompleteAppVersionUploadRequest) GetReleaseNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseNotes.Get(), o.ReleaseNotes.IsSet()
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *CompleteAppVersionUploadRequest) HasReleaseNotes() bool {
	if o != nil && o.ReleaseNotes.IsSet() {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given NullableString and assigns it to the ReleaseNotes field.
func (o *CompleteAppVersionUploadRequest) SetReleaseNotes(v string) {
	o.ReleaseNotes.Set(&v)
}
// SetReleaseNotesNil sets the value for ReleaseNotes to be an explicit nil
func (o *CompleteAppVersionUploadRequest) SetReleaseNotesNil() {
	o.ReleaseNotes.Set(nil)
}

// UnsetReleaseNotes ensures that no value is present for ReleaseNotes, not even an explicit nil
func (o *CompleteAppVersionUploadRequest) UnsetReleaseNotes() {
	o.ReleaseNotes.Unset()
}

func (o CompleteAppVersionUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteAppVersionUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["uploadId"] = o.UploadId
	toSerialize["parts"] = o.Parts
	if o.VersionName.IsSet() {
		toSerialize["versionName"] = o.VersionName.Get()
	}
	if o.ReleaseNotes.IsSet() {
		toSerialize["releaseNotes"] = o.ReleaseNotes.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompleteAppVersionUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"uploadId",
		"parts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteAppVersionUploadRequest := _CompleteAppVersionUploadRequest{}

	err = json.Unmarshal(data, &varCompleteAppVersionUploadRequest)

	if err != nil {
		return err
	}

	*o = CompleteAppVersionUploadRequest(varCompleteAppVersionUploadRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "uploadId")
		delete(additionalProperties, "parts")
		delete(additionalProperties, "versionName")
		delete(additionalProperties, "releaseNotes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompleteAppVersionUploadRequest struct {
	value *CompleteAppVersionUploadRequest
	isSet bool
}

func (v NullableCompleteAppVersionUploadRequest) Get() *CompleteAppVersionUploadRequest {
	return v.value
}

func (v *NullableCompleteAppVersionUploadRequest) Set(val *CompleteAppVersionUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteAppVersionUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteAppVersionUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteAppVersionUploadRequest(val *CompleteAppVersionUploadRequest) *NullableCompleteAppVersionUploadRequest {
	return &NullableCompleteAppVersionUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteAppVersionUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteAppVersionUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


